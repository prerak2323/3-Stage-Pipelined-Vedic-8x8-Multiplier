/* Generated by Yosys 0.45+106 (git sha1 982fade0d, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3) */

module FullAdder(a, b, cin, sum, carry);
  input a;
  wire a;
  input b;
  wire b;
  output carry;
  wire carry;
  input cin;
  wire cin;
  wire ha1_carry;
  wire ha1_sum;
  wire ha2_carry;
  output sum;
  wire sum;
  OR2_X1 _0_ (
    .A1(ha1_carry),
    .A2(ha2_carry),
    .ZN(carry)
  );
  HalfAdder HA1 (
    .a(a),
    .b(b),
    .carry(ha1_carry),
    .sum(ha1_sum)
  );
  HalfAdder HA2 (
    .a(ha1_sum),
    .b(cin),
    .carry(ha2_carry),
    .sum(sum)
  );
endmodule

module HalfAdder(a, b, sum, carry);
  input a;
  wire a;
  input b;
  wire b;
  output carry;
  wire carry;
  output sum;
  wire sum;
  AND2_X1 _0_ (
    .A1(a),
    .A2(b),
    .ZN(carry)
  );
  XOR2_X1 _1_ (
    .A(a),
    .B(b),
    .Z(sum)
  );
endmodule

module csa4(a, b, cin, sum, cout, ground);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  input [3:0] a;
  wire [3:0] a;
  input [3:0] b;
  wire [3:0] b;
  wire [3:0] carry;
  wire [3:0] carry0;
  wire [3:0] carry1;
  input cin;
  wire cin;
  output cout;
  wire cout;
  input ground;
  wire ground;
  output [3:0] sum;
  wire [3:0] sum;
  wire [3:0] sum0;
  wire [3:0] sum1;
  INV_X1 _04_ (
    .A(ground),
    .ZN(_03_)
  );
  MUX2_X1 _05_ (
    .A(sum0[0]),
    .B(sum1[0]),
    .S(cin),
    .Z(sum[0])
  );
  MUX2_X1 _06_ (
    .A(carry0[0]),
    .B(carry1[0]),
    .S(cin),
    .Z(_00_)
  );
  MUX2_X1 _07_ (
    .A(sum0[1]),
    .B(sum1[1]),
    .S(_00_),
    .Z(sum[1])
  );
  MUX2_X1 _08_ (
    .A(carry0[1]),
    .B(carry1[1]),
    .S(_00_),
    .Z(_01_)
  );
  MUX2_X1 _09_ (
    .A(sum0[2]),
    .B(sum1[2]),
    .S(_01_),
    .Z(sum[2])
  );
  MUX2_X1 _10_ (
    .A(carry0[2]),
    .B(carry1[2]),
    .S(_01_),
    .Z(_02_)
  );
  MUX2_X1 _11_ (
    .A(sum0[3]),
    .B(sum1[3]),
    .S(_02_),
    .Z(sum[3])
  );
  MUX2_X1 _12_ (
    .A(carry0[3]),
    .B(carry1[3]),
    .S(_02_),
    .Z(cout)
  );
  FullAdder FA1_0 (
    .a(a[0]),
    .b(b[0]),
    .carry(carry1[0]),
    .cin(_03_),
    .sum(sum1[0])
  );
  HalfAdder HA0_0 (
    .a(a[0]),
    .b(b[0]),
    .carry(carry0[0]),
    .sum(sum0[0])
  );
  FullAdder \gen_csa[1].FA0  (
    .a(a[1]),
    .b(b[1]),
    .carry(carry0[1]),
    .cin(ground),
    .sum(sum0[1])
  );
  FullAdder \gen_csa[1].FA1  (
    .a(a[1]),
    .b(b[1]),
    .carry(carry1[1]),
    .cin(_03_),
    .sum(sum1[1])
  );
  FullAdder \gen_csa[2].FA0  (
    .a(a[2]),
    .b(b[2]),
    .carry(carry0[2]),
    .cin(ground),
    .sum(sum0[2])
  );
  FullAdder \gen_csa[2].FA1  (
    .a(a[2]),
    .b(b[2]),
    .carry(carry1[2]),
    .cin(_03_),
    .sum(sum1[2])
  );
  FullAdder \gen_csa[3].FA0  (
    .a(a[3]),
    .b(b[3]),
    .carry(carry0[3]),
    .cin(ground),
    .sum(sum0[3])
  );
  FullAdder \gen_csa[3].FA1  (
    .a(a[3]),
    .b(b[3]),
    .carry(carry1[3]),
    .cin(_03_),
    .sum(sum1[3])
  );
  assign carry[3] = cout;
endmodule

module csa8(a, b, cin, sum, cout, ground);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  input [7:0] a;
  wire [7:0] a;
  input [7:0] b;
  wire [7:0] b;
  wire [7:0] carry;
  wire [7:0] carry0;
  wire [7:0] carry1;
  input cin;
  wire cin;
  output cout;
  wire cout;
  input ground;
  wire ground;
  output [7:0] sum;
  wire [7:0] sum;
  wire [7:0] sum0;
  wire [7:0] sum1;
  INV_X1 _08_ (
    .A(ground),
    .ZN(_07_)
  );
  MUX2_X1 _09_ (
    .A(sum0[0]),
    .B(sum1[0]),
    .S(cin),
    .Z(sum[0])
  );
  MUX2_X1 _10_ (
    .A(carry0[0]),
    .B(carry1[0]),
    .S(cin),
    .Z(_00_)
  );
  MUX2_X1 _11_ (
    .A(sum0[1]),
    .B(sum1[1]),
    .S(_00_),
    .Z(sum[1])
  );
  MUX2_X1 _12_ (
    .A(carry0[1]),
    .B(carry1[1]),
    .S(_00_),
    .Z(_01_)
  );
  MUX2_X1 _13_ (
    .A(sum0[2]),
    .B(sum1[2]),
    .S(_01_),
    .Z(sum[2])
  );
  MUX2_X1 _14_ (
    .A(carry0[2]),
    .B(carry1[2]),
    .S(_01_),
    .Z(_02_)
  );
  MUX2_X1 _15_ (
    .A(sum0[3]),
    .B(sum1[3]),
    .S(_02_),
    .Z(sum[3])
  );
  MUX2_X1 _16_ (
    .A(carry0[3]),
    .B(carry1[3]),
    .S(_02_),
    .Z(_03_)
  );
  MUX2_X1 _17_ (
    .A(sum0[4]),
    .B(sum1[4]),
    .S(_03_),
    .Z(sum[4])
  );
  MUX2_X1 _18_ (
    .A(carry0[4]),
    .B(carry1[4]),
    .S(_03_),
    .Z(_04_)
  );
  MUX2_X1 _19_ (
    .A(sum0[5]),
    .B(sum1[5]),
    .S(_04_),
    .Z(sum[5])
  );
  MUX2_X1 _20_ (
    .A(carry0[5]),
    .B(carry1[5]),
    .S(_04_),
    .Z(_05_)
  );
  MUX2_X1 _21_ (
    .A(sum0[6]),
    .B(sum1[6]),
    .S(_05_),
    .Z(sum[6])
  );
  MUX2_X1 _22_ (
    .A(carry0[6]),
    .B(carry1[6]),
    .S(_05_),
    .Z(_06_)
  );
  MUX2_X1 _23_ (
    .A(sum0[7]),
    .B(sum1[7]),
    .S(_06_),
    .Z(sum[7])
  );
  MUX2_X1 _24_ (
    .A(carry0[7]),
    .B(carry1[7]),
    .S(_06_),
    .Z(cout)
  );
  FullAdder FA1_0 (
    .a(a[0]),
    .b(b[0]),
    .carry(carry1[0]),
    .cin(_07_),
    .sum(sum1[0])
  );
  HalfAdder HA0_0 (
    .a(a[0]),
    .b(b[0]),
    .carry(carry0[0]),
    .sum(sum0[0])
  );
  FullAdder \gen_csa[1].FA0  (
    .a(a[1]),
    .b(b[1]),
    .carry(carry0[1]),
    .cin(ground),
    .sum(sum0[1])
  );
  FullAdder \gen_csa[1].FA1  (
    .a(a[1]),
    .b(b[1]),
    .carry(carry1[1]),
    .cin(_07_),
    .sum(sum1[1])
  );
  FullAdder \gen_csa[2].FA0  (
    .a(a[2]),
    .b(b[2]),
    .carry(carry0[2]),
    .cin(ground),
    .sum(sum0[2])
  );
  FullAdder \gen_csa[2].FA1  (
    .a(a[2]),
    .b(b[2]),
    .carry(carry1[2]),
    .cin(_07_),
    .sum(sum1[2])
  );
  FullAdder \gen_csa[3].FA0  (
    .a(a[3]),
    .b(b[3]),
    .carry(carry0[3]),
    .cin(ground),
    .sum(sum0[3])
  );
  FullAdder \gen_csa[3].FA1  (
    .a(a[3]),
    .b(b[3]),
    .carry(carry1[3]),
    .cin(_07_),
    .sum(sum1[3])
  );
  FullAdder \gen_csa[4].FA0  (
    .a(a[4]),
    .b(b[4]),
    .carry(carry0[4]),
    .cin(ground),
    .sum(sum0[4])
  );
  FullAdder \gen_csa[4].FA1  (
    .a(a[4]),
    .b(b[4]),
    .carry(carry1[4]),
    .cin(_07_),
    .sum(sum1[4])
  );
  FullAdder \gen_csa[5].FA0  (
    .a(a[5]),
    .b(b[5]),
    .carry(carry0[5]),
    .cin(ground),
    .sum(sum0[5])
  );
  FullAdder \gen_csa[5].FA1  (
    .a(a[5]),
    .b(b[5]),
    .carry(carry1[5]),
    .cin(_07_),
    .sum(sum1[5])
  );
  FullAdder \gen_csa[6].FA0  (
    .a(a[6]),
    .b(b[6]),
    .carry(carry0[6]),
    .cin(ground),
    .sum(sum0[6])
  );
  FullAdder \gen_csa[6].FA1  (
    .a(a[6]),
    .b(b[6]),
    .carry(carry1[6]),
    .cin(_07_),
    .sum(sum1[6])
  );
  FullAdder \gen_csa[7].FA0  (
    .a(a[7]),
    .b(b[7]),
    .carry(carry0[7]),
    .cin(ground),
    .sum(sum0[7])
  );
  FullAdder \gen_csa[7].FA1  (
    .a(a[7]),
    .b(b[7]),
    .carry(carry1[7]),
    .cin(_07_),
    .sum(sum1[7])
  );
  assign carry[7] = cout;
endmodule

module vedic2x2(a, b, prod);
  input [1:0] a;
  wire [1:0] a;
  wire a0b0;
  wire a0b1;
  wire a1b0;
  wire a1b1;
  input [1:0] b;
  wire [1:0] b;
  wire carry;
  output [3:0] prod;
  wire [3:0] prod;
  AND2_X1 _0_ (
    .A1(a[1]),
    .A2(b[1]),
    .ZN(a1b1)
  );
  AND2_X1 _1_ (
    .A1(b[1]),
    .A2(a[0]),
    .ZN(a0b1)
  );
  AND2_X1 _2_ (
    .A1(a[1]),
    .A2(b[0]),
    .ZN(a1b0)
  );
  AND2_X1 _3_ (
    .A1(a[0]),
    .A2(b[0]),
    .ZN(prod[0])
  );
  HalfAdder HA0 (
    .a(a0b1),
    .b(a1b0),
    .carry(carry),
    .sum(prod[1])
  );
  HalfAdder HA1 (
    .a(a1b1),
    .b(carry),
    .carry(prod[3]),
    .sum(prod[2])
  );
  assign a0b0 = prod[0];
endmodule

module vedic4x4(a, b, prod, overflow, ground);
  input [3:0] a;
  wire [3:0] a;
  input [3:0] b;
  wire [3:0] b;
  wire c1;
  wire c2;
  wire cnet;
  input ground;
  wire ground;
  output overflow;
  wire overflow;
  output [7:0] prod;
  wire [7:0] prod;
  wire [3:0] prodm0;
  wire [3:0] prodm1;
  wire [3:0] prodm2;
  wire [3:0] prodm3;
  wire [3:0] sums1;
  wire [3:0] sums2;
  OR2_X1 _0_ (
    .A1(c1),
    .A2(c2),
    .ZN(cnet)
  );
  vedic2x2 M0 (
    .a(a[1:0]),
    .b(b[1:0]),
    .ground(ground),
    .prod(prodm0)
  );
  vedic2x2 M1 (
    .a(a[1:0]),
    .b(b[3:2]),
    .ground(ground),
    .prod(prodm1)
  );
  vedic2x2 M2 (
    .a(a[3:2]),
    .b(b[1:0]),
    .ground(ground),
    .prod(prodm2)
  );
  vedic2x2 M3 (
    .a(a[3:2]),
    .b(b[3:2]),
    .ground(ground),
    .prod(prodm3)
  );
  csa4 stage1 (
    .a(prodm1),
    .b(prodm2),
    .cin(ground),
    .cout(c1),
    .ground(ground),
    .sum(sums1)
  );
  csa4 stage2 (
    .a({ ground, ground, prodm0[3:2] }),
    .b(sums1),
    .cin(ground),
    .cout(c2),
    .ground(ground),
    .sum(sums2)
  );
  csa4 stage3 (
    .a({ ground, cnet, sums2[3:2] }),
    .b(prodm3),
    .cin(ground),
    .cout(overflow),
    .ground(ground),
    .sum(prod[7:4])
  );
  assign prod[3:0] = { sums2[1:0], prodm0[1:0] };
endmodule

module vedic8x8(a, b, clk, prod, overflow, ground);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  input [7:0] a;
  wire [7:0] a;
  input [7:0] b;
  wire [7:0] b;
  wire c1;
  wire c1_s1;
  wire c1_s2;
  wire c2;
  wire c2_s2;
  input clk;
  wire clk;
  input ground;
  wire ground;
  wire ov1;
  wire ov2;
  wire ov3;
  wire ov4;
  output overflow;
  wire overflow;
  output [15:0] prod;
  wire [15:0] prod;
  wire [7:0] prodm0;
  wire [7:0] prodm0_s0;
  wire [7:0] prodm0_s1;
  wire [7:0] prodm0_s2;
  wire [7:0] prodm1;
  wire [7:0] prodm1_s0;
  wire [7:0] prodm2;
  wire [7:0] prodm2_s0;
  wire [7:0] prodm3;
  wire [7:0] prodm3_s0;
  wire [7:0] prodm3_s1;
  wire [7:0] prodm3_s2;
  wire [7:0] sum_s1;
  wire [7:0] sum_s2;
  wire [7:0] sums1;
  wire [7:0] sums2;
  wire [7:0] sums3;
  OR2_X1 _100_ (
    .A1(c1_s2),
    .A2(c2_s2),
    .ZN(_000_)
  );
  DFF_X1 _101_ (
    .CK(clk),
    .D(sums2[0]),
    .Q(sum_s2[0]),
    .QN(_086_)
  );
  DFF_X1 _102_ (
    .CK(clk),
    .D(sums2[1]),
    .Q(sum_s2[1]),
    .QN(_085_)
  );
  DFF_X1 _103_ (
    .CK(clk),
    .D(sums2[2]),
    .Q(sum_s2[2]),
    .QN(_084_)
  );
  DFF_X1 _104_ (
    .CK(clk),
    .D(sums2[3]),
    .Q(sum_s2[3]),
    .QN(_083_)
  );
  DFF_X1 _105_ (
    .CK(clk),
    .D(sums2[4]),
    .Q(sum_s2[4]),
    .QN(_082_)
  );
  DFF_X1 _106_ (
    .CK(clk),
    .D(sums2[5]),
    .Q(sum_s2[5]),
    .QN(_081_)
  );
  DFF_X1 _107_ (
    .CK(clk),
    .D(sums2[6]),
    .Q(sum_s2[6]),
    .QN(_080_)
  );
  DFF_X1 _108_ (
    .CK(clk),
    .D(sums2[7]),
    .Q(sum_s2[7]),
    .QN(_090_)
  );
  DFF_X1 _109_ (
    .CK(clk),
    .D(c1_s1),
    .Q(c1_s2),
    .QN(_089_)
  );
  DFF_X1 _110_ (
    .CK(clk),
    .D(c2),
    .Q(c2_s2),
    .QN(_088_)
  );
  DFF_X1 _111_ (
    .CK(clk),
    .D(prodm0_s2[0]),
    .Q(prod[0]),
    .QN(_079_)
  );
  DFF_X1 _112_ (
    .CK(clk),
    .D(prodm0_s2[1]),
    .Q(prod[1]),
    .QN(_078_)
  );
  DFF_X1 _113_ (
    .CK(clk),
    .D(prodm0_s2[2]),
    .Q(prod[2]),
    .QN(_077_)
  );
  DFF_X1 _114_ (
    .CK(clk),
    .D(prodm0_s2[3]),
    .Q(prod[3]),
    .QN(_076_)
  );
  DFF_X1 _115_ (
    .CK(clk),
    .D(sum_s2[0]),
    .Q(prod[4]),
    .QN(_075_)
  );
  DFF_X1 _116_ (
    .CK(clk),
    .D(sum_s2[1]),
    .Q(prod[5]),
    .QN(_074_)
  );
  DFF_X1 _117_ (
    .CK(clk),
    .D(sum_s2[2]),
    .Q(prod[6]),
    .QN(_073_)
  );
  DFF_X1 _118_ (
    .CK(clk),
    .D(sum_s2[3]),
    .Q(prod[7]),
    .QN(_072_)
  );
  DFF_X1 _119_ (
    .CK(clk),
    .D(sums3[0]),
    .Q(prod[8]),
    .QN(_071_)
  );
  DFF_X1 _120_ (
    .CK(clk),
    .D(sums3[1]),
    .Q(prod[9]),
    .QN(_070_)
  );
  DFF_X1 _121_ (
    .CK(clk),
    .D(sums3[2]),
    .Q(prod[10]),
    .QN(_069_)
  );
  DFF_X1 _122_ (
    .CK(clk),
    .D(sums3[3]),
    .Q(prod[11]),
    .QN(_068_)
  );
  DFF_X1 _123_ (
    .CK(clk),
    .D(sums3[4]),
    .Q(prod[12]),
    .QN(_067_)
  );
  DFF_X1 _124_ (
    .CK(clk),
    .D(sums3[5]),
    .Q(prod[13]),
    .QN(_066_)
  );
  DFF_X1 _125_ (
    .CK(clk),
    .D(sums3[6]),
    .Q(prod[14]),
    .QN(_065_)
  );
  DFF_X1 _126_ (
    .CK(clk),
    .D(sums3[7]),
    .Q(prod[15]),
    .QN(_087_)
  );
  DFF_X1 _127_ (
    .CK(clk),
    .D(prodm0_s1[0]),
    .Q(prodm0_s2[0]),
    .QN(_064_)
  );
  DFF_X1 _128_ (
    .CK(clk),
    .D(prodm0_s1[1]),
    .Q(prodm0_s2[1]),
    .QN(_063_)
  );
  DFF_X1 _129_ (
    .CK(clk),
    .D(prodm0_s1[2]),
    .Q(prodm0_s2[2]),
    .QN(_062_)
  );
  DFF_X1 _130_ (
    .CK(clk),
    .D(prodm0_s1[3]),
    .Q(prodm0_s2[3]),
    .QN(_061_)
  );
  DFF_X1 _131_ (
    .CK(clk),
    .D(prodm0_s1[4]),
    .Q(prodm0_s2[4]),
    .QN(_060_)
  );
  DFF_X1 _132_ (
    .CK(clk),
    .D(prodm0_s1[5]),
    .Q(prodm0_s2[5]),
    .QN(_059_)
  );
  DFF_X1 _133_ (
    .CK(clk),
    .D(prodm0_s1[6]),
    .Q(prodm0_s2[6]),
    .QN(_058_)
  );
  DFF_X1 _134_ (
    .CK(clk),
    .D(prodm0_s1[7]),
    .Q(prodm0_s2[7]),
    .QN(_091_)
  );
  DFF_X1 _135_ (
    .CK(clk),
    .D(prodm3_s1[0]),
    .Q(prodm3_s2[0]),
    .QN(_057_)
  );
  DFF_X1 _136_ (
    .CK(clk),
    .D(prodm3_s1[1]),
    .Q(prodm3_s2[1]),
    .QN(_056_)
  );
  DFF_X1 _137_ (
    .CK(clk),
    .D(prodm3_s1[2]),
    .Q(prodm3_s2[2]),
    .QN(_055_)
  );
  DFF_X1 _138_ (
    .CK(clk),
    .D(prodm3_s1[3]),
    .Q(prodm3_s2[3]),
    .QN(_054_)
  );
  DFF_X1 _139_ (
    .CK(clk),
    .D(prodm3_s1[4]),
    .Q(prodm3_s2[4]),
    .QN(_053_)
  );
  DFF_X1 _140_ (
    .CK(clk),
    .D(prodm3_s1[5]),
    .Q(prodm3_s2[5]),
    .QN(_052_)
  );
  DFF_X1 _141_ (
    .CK(clk),
    .D(prodm3_s1[6]),
    .Q(prodm3_s2[6]),
    .QN(_051_)
  );
  DFF_X1 _142_ (
    .CK(clk),
    .D(prodm3_s1[7]),
    .Q(prodm3_s2[7]),
    .QN(_092_)
  );
  DFF_X1 _143_ (
    .CK(clk),
    .D(c1),
    .Q(c1_s1),
    .QN(_093_)
  );
  DFF_X1 _144_ (
    .CK(clk),
    .D(prodm0_s0[0]),
    .Q(prodm0_s1[0]),
    .QN(_050_)
  );
  DFF_X1 _145_ (
    .CK(clk),
    .D(prodm0_s0[1]),
    .Q(prodm0_s1[1]),
    .QN(_049_)
  );
  DFF_X1 _146_ (
    .CK(clk),
    .D(prodm0_s0[2]),
    .Q(prodm0_s1[2]),
    .QN(_048_)
  );
  DFF_X1 _147_ (
    .CK(clk),
    .D(prodm0_s0[3]),
    .Q(prodm0_s1[3]),
    .QN(_047_)
  );
  DFF_X1 _148_ (
    .CK(clk),
    .D(prodm0_s0[4]),
    .Q(prodm0_s1[4]),
    .QN(_046_)
  );
  DFF_X1 _149_ (
    .CK(clk),
    .D(prodm0_s0[5]),
    .Q(prodm0_s1[5]),
    .QN(_045_)
  );
  DFF_X1 _150_ (
    .CK(clk),
    .D(prodm0_s0[6]),
    .Q(prodm0_s1[6]),
    .QN(_044_)
  );
  DFF_X1 _151_ (
    .CK(clk),
    .D(prodm0_s0[7]),
    .Q(prodm0_s1[7]),
    .QN(_094_)
  );
  DFF_X1 _152_ (
    .CK(clk),
    .D(prodm3_s0[0]),
    .Q(prodm3_s1[0]),
    .QN(_043_)
  );
  DFF_X1 _153_ (
    .CK(clk),
    .D(prodm3_s0[1]),
    .Q(prodm3_s1[1]),
    .QN(_042_)
  );
  DFF_X1 _154_ (
    .CK(clk),
    .D(prodm3_s0[2]),
    .Q(prodm3_s1[2]),
    .QN(_041_)
  );
  DFF_X1 _155_ (
    .CK(clk),
    .D(prodm3_s0[3]),
    .Q(prodm3_s1[3]),
    .QN(_040_)
  );
  DFF_X1 _156_ (
    .CK(clk),
    .D(prodm3_s0[4]),
    .Q(prodm3_s1[4]),
    .QN(_039_)
  );
  DFF_X1 _157_ (
    .CK(clk),
    .D(prodm3_s0[5]),
    .Q(prodm3_s1[5]),
    .QN(_038_)
  );
  DFF_X1 _158_ (
    .CK(clk),
    .D(prodm3_s0[6]),
    .Q(prodm3_s1[6]),
    .QN(_037_)
  );
  DFF_X1 _159_ (
    .CK(clk),
    .D(prodm3_s0[7]),
    .Q(prodm3_s1[7]),
    .QN(_095_)
  );
  DFF_X1 _160_ (
    .CK(clk),
    .D(sums1[0]),
    .Q(sum_s1[0]),
    .QN(_036_)
  );
  DFF_X1 _161_ (
    .CK(clk),
    .D(sums1[1]),
    .Q(sum_s1[1]),
    .QN(_035_)
  );
  DFF_X1 _162_ (
    .CK(clk),
    .D(sums1[2]),
    .Q(sum_s1[2]),
    .QN(_034_)
  );
  DFF_X1 _163_ (
    .CK(clk),
    .D(sums1[3]),
    .Q(sum_s1[3]),
    .QN(_033_)
  );
  DFF_X1 _164_ (
    .CK(clk),
    .D(sums1[4]),
    .Q(sum_s1[4]),
    .QN(_032_)
  );
  DFF_X1 _165_ (
    .CK(clk),
    .D(sums1[5]),
    .Q(sum_s1[5]),
    .QN(_031_)
  );
  DFF_X1 _166_ (
    .CK(clk),
    .D(sums1[6]),
    .Q(sum_s1[6]),
    .QN(_030_)
  );
  DFF_X1 _167_ (
    .CK(clk),
    .D(sums1[7]),
    .Q(sum_s1[7]),
    .QN(_096_)
  );
  DFF_X1 _168_ (
    .CK(clk),
    .D(prodm0[0]),
    .Q(prodm0_s0[0]),
    .QN(_029_)
  );
  DFF_X1 _169_ (
    .CK(clk),
    .D(prodm0[1]),
    .Q(prodm0_s0[1]),
    .QN(_028_)
  );
  DFF_X1 _170_ (
    .CK(clk),
    .D(prodm0[2]),
    .Q(prodm0_s0[2]),
    .QN(_027_)
  );
  DFF_X1 _171_ (
    .CK(clk),
    .D(prodm0[3]),
    .Q(prodm0_s0[3]),
    .QN(_026_)
  );
  DFF_X1 _172_ (
    .CK(clk),
    .D(prodm0[4]),
    .Q(prodm0_s0[4]),
    .QN(_025_)
  );
  DFF_X1 _173_ (
    .CK(clk),
    .D(prodm0[5]),
    .Q(prodm0_s0[5]),
    .QN(_024_)
  );
  DFF_X1 _174_ (
    .CK(clk),
    .D(prodm0[6]),
    .Q(prodm0_s0[6]),
    .QN(_023_)
  );
  DFF_X1 _175_ (
    .CK(clk),
    .D(prodm0[7]),
    .Q(prodm0_s0[7]),
    .QN(_097_)
  );
  DFF_X1 _176_ (
    .CK(clk),
    .D(prodm1[0]),
    .Q(prodm1_s0[0]),
    .QN(_022_)
  );
  DFF_X1 _177_ (
    .CK(clk),
    .D(prodm1[1]),
    .Q(prodm1_s0[1]),
    .QN(_021_)
  );
  DFF_X1 _178_ (
    .CK(clk),
    .D(prodm1[2]),
    .Q(prodm1_s0[2]),
    .QN(_020_)
  );
  DFF_X1 _179_ (
    .CK(clk),
    .D(prodm1[3]),
    .Q(prodm1_s0[3]),
    .QN(_019_)
  );
  DFF_X1 _180_ (
    .CK(clk),
    .D(prodm1[4]),
    .Q(prodm1_s0[4]),
    .QN(_018_)
  );
  DFF_X1 _181_ (
    .CK(clk),
    .D(prodm1[5]),
    .Q(prodm1_s0[5]),
    .QN(_017_)
  );
  DFF_X1 _182_ (
    .CK(clk),
    .D(prodm1[6]),
    .Q(prodm1_s0[6]),
    .QN(_016_)
  );
  DFF_X1 _183_ (
    .CK(clk),
    .D(prodm1[7]),
    .Q(prodm1_s0[7]),
    .QN(_098_)
  );
  DFF_X1 _184_ (
    .CK(clk),
    .D(prodm2[0]),
    .Q(prodm2_s0[0]),
    .QN(_015_)
  );
  DFF_X1 _185_ (
    .CK(clk),
    .D(prodm2[1]),
    .Q(prodm2_s0[1]),
    .QN(_014_)
  );
  DFF_X1 _186_ (
    .CK(clk),
    .D(prodm2[2]),
    .Q(prodm2_s0[2]),
    .QN(_013_)
  );
  DFF_X1 _187_ (
    .CK(clk),
    .D(prodm2[3]),
    .Q(prodm2_s0[3]),
    .QN(_012_)
  );
  DFF_X1 _188_ (
    .CK(clk),
    .D(prodm2[4]),
    .Q(prodm2_s0[4]),
    .QN(_011_)
  );
  DFF_X1 _189_ (
    .CK(clk),
    .D(prodm2[5]),
    .Q(prodm2_s0[5]),
    .QN(_010_)
  );
  DFF_X1 _190_ (
    .CK(clk),
    .D(prodm2[6]),
    .Q(prodm2_s0[6]),
    .QN(_009_)
  );
  DFF_X1 _191_ (
    .CK(clk),
    .D(prodm2[7]),
    .Q(prodm2_s0[7]),
    .QN(_099_)
  );
  DFF_X1 _192_ (
    .CK(clk),
    .D(prodm3[0]),
    .Q(prodm3_s0[0]),
    .QN(_008_)
  );
  DFF_X1 _193_ (
    .CK(clk),
    .D(prodm3[1]),
    .Q(prodm3_s0[1]),
    .QN(_007_)
  );
  DFF_X1 _194_ (
    .CK(clk),
    .D(prodm3[2]),
    .Q(prodm3_s0[2]),
    .QN(_006_)
  );
  DFF_X1 _195_ (
    .CK(clk),
    .D(prodm3[3]),
    .Q(prodm3_s0[3]),
    .QN(_005_)
  );
  DFF_X1 _196_ (
    .CK(clk),
    .D(prodm3[4]),
    .Q(prodm3_s0[4]),
    .QN(_004_)
  );
  DFF_X1 _197_ (
    .CK(clk),
    .D(prodm3[5]),
    .Q(prodm3_s0[5]),
    .QN(_003_)
  );
  DFF_X1 _198_ (
    .CK(clk),
    .D(prodm3[6]),
    .Q(prodm3_s0[6]),
    .QN(_002_)
  );
  DFF_X1 _199_ (
    .CK(clk),
    .D(prodm3[7]),
    .Q(prodm3_s0[7]),
    .QN(_001_)
  );
  vedic4x4 M0 (
    .a(a[3:0]),
    .b(b[3:0]),
    .ground(ground),
    .overflow(ov1),
    .prod(prodm0)
  );
  vedic4x4 M1 (
    .a(a[3:0]),
    .b(b[7:4]),
    .ground(ground),
    .overflow(ov2),
    .prod(prodm1)
  );
  vedic4x4 M2 (
    .a(a[7:4]),
    .b(b[3:0]),
    .ground(ground),
    .overflow(ov3),
    .prod(prodm2)
  );
  vedic4x4 M3 (
    .a(a[7:4]),
    .b(b[7:4]),
    .ground(ground),
    .overflow(ov4),
    .prod(prodm3)
  );
  csa8 stage1 (
    .a(prodm1_s0),
    .b(prodm2_s0),
    .cin(ground),
    .cout(c1),
    .ground(ground),
    .sum(sums1)
  );
  csa8 stage2 (
    .a({ ground, ground, ground, ground, prodm0_s1[7:4] }),
    .b(sum_s1),
    .cin(ground),
    .cout(c2),
    .ground(ground),
    .sum(sums2)
  );
  csa8 stage3 (
    .a({ ground, ground, ground, _000_, sum_s2[7:4] }),
    .b(prodm3_s2),
    .cin(ground),
    .cout(overflow),
    .ground(ground),
    .sum(sums3)
  );
endmodule
